// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: revije.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RevijeService_DodajRevijo_FullMethodName   = "/revije.RevijeService/DodajRevijo"
	RevijeService_PridobiRevijo_FullMethodName = "/revije.RevijeService/PridobiRevijo"
	RevijeService_IzbrisiRevijo_FullMethodName = "/revije.RevijeService/IzbrisiRevijo"
)

// RevijeServiceClient is the client API for RevijeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RevijeServiceClient interface {
	DodajRevijo(ctx context.Context, in *Revija, opts ...grpc.CallOption) (*Response, error)
	PridobiRevijo(ctx context.Context, in *RevijaRequest, opts ...grpc.CallOption) (*Revija, error)
	IzbrisiRevijo(ctx context.Context, in *RevijaRequest, opts ...grpc.CallOption) (*Response, error)
}

type revijeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRevijeServiceClient(cc grpc.ClientConnInterface) RevijeServiceClient {
	return &revijeServiceClient{cc}
}

func (c *revijeServiceClient) DodajRevijo(ctx context.Context, in *Revija, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, RevijeService_DodajRevijo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revijeServiceClient) PridobiRevijo(ctx context.Context, in *RevijaRequest, opts ...grpc.CallOption) (*Revija, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Revija)
	err := c.cc.Invoke(ctx, RevijeService_PridobiRevijo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revijeServiceClient) IzbrisiRevijo(ctx context.Context, in *RevijaRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, RevijeService_IzbrisiRevijo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RevijeServiceServer is the server API for RevijeService service.
// All implementations must embed UnimplementedRevijeServiceServer
// for forward compatibility.
type RevijeServiceServer interface {
	DodajRevijo(context.Context, *Revija) (*Response, error)
	PridobiRevijo(context.Context, *RevijaRequest) (*Revija, error)
	IzbrisiRevijo(context.Context, *RevijaRequest) (*Response, error)
	mustEmbedUnimplementedRevijeServiceServer()
}

// UnimplementedRevijeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRevijeServiceServer struct{}

func (UnimplementedRevijeServiceServer) DodajRevijo(context.Context, *Revija) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DodajRevijo not implemented")
}
func (UnimplementedRevijeServiceServer) PridobiRevijo(context.Context, *RevijaRequest) (*Revija, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PridobiRevijo not implemented")
}
func (UnimplementedRevijeServiceServer) IzbrisiRevijo(context.Context, *RevijaRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IzbrisiRevijo not implemented")
}
func (UnimplementedRevijeServiceServer) mustEmbedUnimplementedRevijeServiceServer() {}
func (UnimplementedRevijeServiceServer) testEmbeddedByValue()                       {}

// UnsafeRevijeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RevijeServiceServer will
// result in compilation errors.
type UnsafeRevijeServiceServer interface {
	mustEmbedUnimplementedRevijeServiceServer()
}

func RegisterRevijeServiceServer(s grpc.ServiceRegistrar, srv RevijeServiceServer) {
	// If the following call pancis, it indicates UnimplementedRevijeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RevijeService_ServiceDesc, srv)
}

func _RevijeService_DodajRevijo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Revija)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevijeServiceServer).DodajRevijo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RevijeService_DodajRevijo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevijeServiceServer).DodajRevijo(ctx, req.(*Revija))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevijeService_PridobiRevijo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevijaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevijeServiceServer).PridobiRevijo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RevijeService_PridobiRevijo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevijeServiceServer).PridobiRevijo(ctx, req.(*RevijaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevijeService_IzbrisiRevijo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevijaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevijeServiceServer).IzbrisiRevijo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RevijeService_IzbrisiRevijo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevijeServiceServer).IzbrisiRevijo(ctx, req.(*RevijaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RevijeService_ServiceDesc is the grpc.ServiceDesc for RevijeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RevijeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "revije.RevijeService",
	HandlerType: (*RevijeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DodajRevijo",
			Handler:    _RevijeService_DodajRevijo_Handler,
		},
		{
			MethodName: "PridobiRevijo",
			Handler:    _RevijeService_PridobiRevijo_Handler,
		},
		{
			MethodName: "IzbrisiRevijo",
			Handler:    _RevijeService_IzbrisiRevijo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "revije.proto",
}
